#!/usr/bin/env node

// commander stuff
var program = require('commander');
var util = require('util');

console.log('-------------------------------------------');
console.log('  ScrAPI - expose a website as a REST API');
console.log('-------------------------------------------');
program
.version('0.0.1')
.usage('[options] <config file>')
.option('-d, --document', 'Generate documentation of API')
.parse(process.argv);

// if no config file, exit
if (program.args[0] === undefined) {
  program.help();
}

// load templates for code generation
var serverTemplateDir = './js-server/templates';
var clientTemplateDir = './js-client/templates';
// default file to save to
var serverOutputFile = "app.js";
var clientOutputFile = "app-client.js";

fs = require('fs')

// load server templates
var serverAPIMethod = fs.readFileSync(serverTemplateDir + '/APIMethod.js').toString();
var includes = fs.readFileSync(serverTemplateDir + '/includes.js').toString();
var serverstart = fs.readFileSync(serverTemplateDir + '/serverstart.js').toString();
// load client templates
var clientAPIMethod = fs.readFileSync(clientTemplateDir + '/APIMethod.js').toString();

// load config
var Config = JSON.parse(fs.readFileSync(program.args[0]).toString());
// TODO: validate Config 

console.log('Creating ' + serverOutputFile + '...');

// server app is divided into three sections, client app is one
// Section 1: header - the include libraries
var serverApp = includes;
var clientApp = '';

// Section 2: each method defined in the config
for (var method in Config.methods) {
	console.log(util.inspect(method));
  serverApp += serverAPIMethod.replace('%%URI%%', method)
  				  .replace('%%OPTIONS%%', JSON.stringify(Config.methods[method]))
  				  .replace('%%SYNOPSIS%%', Config.methods[method].doc_synopsis);
  clientApp += clientAPIMethod.replace('%%URI%%', method)
            .replace('%%OPTIONS%%', JSON.stringify(Config.methods[method]))
            .replace('%%SYNOPSIS%%', Config.methods[method].doc_synopsis);
}

// Section 3: some code to start the express webserver
serverApp += serverstart.replace("%%PORT%%", Config.port)

// save apps
fs.writeFile(serverOutputFile, serverApp);
fs.writeFile(clientOutputFile, clientApp);

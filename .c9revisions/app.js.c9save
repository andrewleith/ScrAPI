{"ts":1375118445596,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var scraper = require('./scraper-outline');\nvar util = require('util');\n\nvar express = require('express');\n\nvar app = express();\n\nConfig = {\n    methods: {\n        'listings': {\n            verb: 'GET',\n            targetNoParams: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n                outputMappings: {  \n                    'id': {\n                        selector: '.views-field-title a',\n                        accessor: 'text'\n                    },\n                    'shortdesc': {\n                        selector: 'views-field-field-listing-misc-label .field-content',\n                        accessor: 'text'\n                    },\n                    'bedrooms': {\n                        selector: '.views-field-field-listing-bedrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'bathrooms': {\n                        selector: '.views-field-field-listing-bathrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'price': {\n                        selector: '.views-field-field-listing-sale-price .field-content',\n                        accessor: 'text'\n                    },\n                    'address': {\n                        selector: '.views-field-field-listing-address .field-content',\n                        accessor: 'text'\n                    },\n                    'openhouse': {\n                        selector: '.views-field-field-listing-open-house .field-content',\n                        accessor: 'text'\n                    },\n                    'description': {\n                        selector: '.views-field-body .field-content',\n                        accessor: 'text'\n                    }\n                }\n            },\n            targetWithParams: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n                outputMappings: {  \n                    'id': {\n                        selector: '.views-field-title a',\n                        accessor: 'text'\n                    },\n                    'shortdesc': {\n                        selector: 'views-field-field-listing-misc-label .field-content',\n                        accessor: 'text'\n                    },\n                    'bedrooms': {\n                        selector: '.views-field-field-listing-bedrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'bathrooms': {\n                        selector: '.views-field-field-listing-bathrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'price': {\n                        selector: '.views-field-field-listing-sale-price .field-content',\n                        accessor: 'text'\n                    },\n                    'address': {\n                        selector: '.views-field-field-listing-address .field-content',\n                        accessor: 'text'\n                    },\n                    'openhouse': {\n                        selector: '.views-field-field-listing-open-house .field-content',\n                        accessor: 'text'\n                    },\n                    'description': {\n                        selector: '.views-field-body .field-content',\n                        accessor: 'text'\n                    }\n                },\n                inputMappings: {\n                    'beds': 'field_listing_bedrooms_value'\n                }\n            }\n        }\n    }\n};\n\nfor (var method in Config.methods) {\n    // the parameter version of the method overwrites the url, so we save the original here\n    var originalUrl = Config.methods[method].targetWithParams.url;\n\n    app.get('/' + method, function(req, res) {\n\n        // how the hell do you check if req.query exists?\n        var hasParams = false;\n        for (var keys in req.query) {\n            hasParams = true;\n            break;\n        }\n\n        // if there are no parameters, use the parameterless scrape\n        if (!hasParams) {\n            scraper.scrape(Config.methods[method].targetNoParams, function(err, output) {\n                res.json(output);\n            }, true);    \n        } else {\n            // map method params to target site's query string params [TODO: support more ways of mapping params (post, routes, whatever)]\n            Config.methods[method].targetWithParams.url = originalUrl;\n\n            for (var param in req.query) {\n                Config.methods[method].targetWithParams.url += Config.methods[method].targetWithParams.inputMappings[param] + '=' + req.query[param] + '&';\n            }            \n            \n            scraper.scrape(Config.methods[method].targetWithParams, function(err, output) {\n                res.json(output);\n            }, true);    \n        }\n        \n    });\n}\n// GET /listings \n// returns all listings\n// optional filter parameters: id, shortdesc, bedrooms, bathrooms, price_max, price_min, address, description\n// app.get('/listings', function(req, res){\n\n//     // parse query string into JSON\n//     var params = {};\n//     for (var param in req.query) {\n//         params[param] = req.query[param];\n//     }\n\n//     scraperOptions = {\n//         url: 'http://grapevine.ca/search-results/classic?',\n//         verb: 'GET',\n//         rowSelector: '.views-row',\n//         outputMappings: {  \n//             'id': {\n//                 selector: '.views-field-title a',\n//                 accessor: 'text'\n//             },\n//             'shortdesc': {\n//                 selector: 'views-field-field-listing-misc-label .field-content',\n//                 accessor: 'text'\n//             },\n//             'bedrooms': {\n//                 selector: '.views-field-field-listing-bedrooms .field-content',\n//                 accessor: 'text'\n//             },\n//             'bathrooms': {\n//                 selector: '.views-field-field-listing-bathrooms .field-content',\n//                 accessor: 'text'\n//             },\n//             'price': {\n//                 selector: '.views-field-field-listing-sale-price .field-content',\n//                 accessor: 'text'\n//             },\n//             'address': {\n//                 selector: '.views-field-field-listing-address .field-content',\n//                 accessor: 'text'\n//             },\n//             'openhouse': {\n//                 selector: '.views-field-field-listing-open-house .field-content',\n//                 accessor: 'text'\n//             },\n//             'description': {\n//                 selector: '.views-field-body .field-content',\n//                 accessor: 'text'\n//             }\n//         }\n//     };\n\n//     scraper.listings(scraperOptions, params, function(err, output) {\n//         //console.log(output);\n//         res.json(output);      \n//     }, true);\n\n// });\n\n// scrape google:\n// scraperOptions = {\n//         url: 'http://www.google.ca/search?&q=test',\n//         verb: 'GET',\n//         rowSelector: 'li.g',\n//         outputMappings: {  \n//             'title': {\n//                 selector: 'h3.r a',\n//                 accessor: 'text'\n//             }\n//         }\n//     };\n\napp.listen(3000);\nconsole.log('Express started on port 3000');"]],"start1":0,"start2":0,"length1":0,"length2":7408}]],"length":7408}
{"contributors":[],"silentsave":false,"ts":1375118468445,"patch":[[{"diffs":[[0,"ess();\n\n"],[1,"var "],[0,"Config ="]],"start1":122,"start2":122,"length1":16,"length2":20}]],"length":7412,"saved":false}
{"ts":1375198412844,"patch":[[{"diffs":[[0,"crap"],[-1,"er-outline');\nvar util = require('util');\n\nvar express = require('express');\n\nvar app = express();"],[1,"i-server');\n\n\n"],[0,"\n\nva"]],"start1":26,"start2":26,"length1":106,"length2":22},{"diffs":[[0,"};\n\n"],[-1,"for (var method in Config.methods) {\n    // the parameter version of the method overwrites the url, so we save the original here\n    var originalUrl = Config.methods[method].targetWithParams.url;\n\n    app.get('/' + method, function(req, res) {\n\n        // how the hell do you check if req.query exists?\n        var hasParams = false;\n        for (var keys in req.query) {\n            hasParams = true;\n            break;\n        }\n\n        // if there are no parameters, use the parameterless scrape\n        if (!hasParams) {\n            scraper.scrape(Config.methods[method].targetNoParams, function(err, output) {\n                res.json(output);\n            }, true);    \n        } else {\n            // map method params to target site's query string params [TODO: support more ways of mapping params (post, routes, whatever)]\n            Config.methods[method].targetWithParams.url = originalUrl;\n\n            for (var param in req.query) {\n                Config.methods[method].targetWithParams.url += Config.methods[method].targetWithParams.inputMappings[param] + '=' + req.query[param] + '&';\n            }            \n            \n            scraper.scrape(Config.methods[method].targetWithParams, function(err, output) {\n                res.json(output);\n            }, true);    \n        }\n        \n    });\n}\n// GET /listings \n// returns all listings\n// optional filter parameters: id, shortdesc, bedrooms, bathrooms, price_max, price_min, address, description\n// app.get('/listings', function(req, res){\n\n//     // parse query string into JSON\n//     var params = {};\n//     for (var param in req.query) {\n//         params[param] = req.query[param];\n//     }\n\n//     scraperOptions = {\n//         url: 'http://grapevine.ca/search-results/classic?',\n//         verb: 'GET',\n//         rowSelector: '.views-row',\n//         outputMappings: {  \n//             'id': {\n//                 selector: '.views-field-title a',\n//                 accessor: 'text'\n//             },\n//             'shortdesc': {\n//                 selector: 'views-field-field-listing-misc-label .field-content',\n//                 accessor: 'text'\n//             },\n//             'bedrooms': {\n//                 selector: '.views-field-field-listing-bedrooms .field-content',\n//                 accessor: 'text'\n//             },\n//             'bathrooms': {\n//                 selector: '.views-field-field-listing-bathrooms .field-content',\n//                 accessor: 'text'\n//             },\n//             'price': {\n//                 selector: '.views-field-field-listing-sale-price .field-content',\n//                 accessor: 'text'\n//             },\n//             'address': {\n//                 selector: '.views-field-field-listing-address .field-content',\n//                 accessor: 'text'\n//             },\n//             'openhouse': {\n//                 selector: '.views-field-field-listing-open-house .field-content',\n//                 accessor: 'text'\n//             },\n//             'description': {\n//                 selector: '.views-field-body .field-content',\n//                 accessor: 'text'\n//             }\n//         }\n//     };\n\n//     scraper.listings(scraperOptions, params, function(err, output) {\n//         //console.log(output);\n//         res.json(output);      \n//     }, true);\n\n// });\n\n// scrape google:\n// scraperOptions = {\n//         url: 'http://www.google.ca/search?&q=test',\n//         verb: 'GET',\n//         rowSelector: 'li.g',\n//         outputMappings: {  \n//             'title': {\n//                 selector: 'h3.r a',\n//                 accessor: 'text'\n//             }\n//         }\n//     };\n\napp.listen(3000);\nconsole.log('Express started on port 3000');"]],"start1":3609,"start2":3609,"length1":3719,"length2":4}]],"length":3613,"saved":false}
{"ts":1375198423232,"patch":[[{"diffs":[[0,"rapi"],[-1,"-server"],[0,"');\n"]],"start1":27,"start2":27,"length1":15,"length2":8}]],"length":3606,"saved":false}
{"ts":1375199395807,"patch":[[{"diffs":[[0,"pi');\n\n\n"],[-1,"\n\n"],[0,"var Conf"]],"start1":29,"start2":29,"length1":18,"length2":16},{"diffs":[[0,"  }\n};\n\n"],[1,"scraper.CreateAPI(Config);\n\n\n"]],"start1":3596,"start2":3596,"length1":8,"length2":37}]],"length":3633,"saved":false}
{"ts":1375199474726,"patch":[[{"diffs":[[0,"api');\n\n"],[-1,"\n"],[0,"var Conf"]],"start1":28,"start2":28,"length1":17,"length2":16}]],"length":3632,"saved":false}
{"ts":1375199892844,"patch":[[{"diffs":[[0,"    "],[-1,"targetNoParams: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n                "],[0,""],[1,""],[0,"outp"]],"start1":121,"start2":121,"length1":182,"length2":8},{"diffs":[[0,"   }"],[-1,"\n            },\n            targetWithParams: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n                outputMappings: {  \n                    'id': {\n                        selector: '.views-field-title a',\n                        accessor: 'text'\n                    },\n                    'shortdesc': {\n                        selector: 'views-field-field-listing-misc-label .field-content',\n                        accessor: 'text'\n                    },\n                    'bedrooms': {\n                        selector: '.views-field-field-listing-bedrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'bathrooms': {\n                        selector: '.views-field-field-listing-bathrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'price': {\n                        selector: '.views-field-field-listing-sale-price .field-content',\n                        accessor: 'text'\n                    },\n                    'address': {\n                        selector: '.views-field-field-listing-address .field-content',\n                        accessor: 'text'\n                    },\n                    'openhouse': {\n                        selector: '.views-field-field-listing-open-house .field-content',\n                        accessor: 'text'\n                    },\n                    'description': {\n                        selector: '.views-field-body .field-content',\n                        accessor: 'text'\n                    }\n                }"],[1,",\n            doc-synopsis: \"Gets a list of all current house listings based on any of the following optional parameters. They keywords search is a contains type searches and not exact matches.\"\n            collectionURI: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n            },\n            elementURI: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row'"],[0,",\n  "]],"start1":1598,"start2":1598,"length1":1689,"length2":551}]],"length":2320,"saved":false}
{"ts":1375200426654,"patch":[[{"diffs":[[0,"atches.\""],[1,","],[0,"\n       "]],"start1":1788,"start2":1788,"length1":16,"length2":17}]],"length":2321,"saved":false}
{"ts":1375200436759,"patch":[[{"diffs":[[0,"     doc"],[-1,"-"],[1,"_"],[0,"synopsis"]],"start1":1611,"start2":1611,"length1":17,"length2":17}]],"length":2321,"saved":false}

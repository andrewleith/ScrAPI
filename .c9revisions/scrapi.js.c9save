{"ts":1375132411296,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var scraper = require('./scraper-outline');\nvar util = require('util');\n\nvar express = require('express');\n\nvar app = express();\n\nvar Config = {\n    methods: {\n        'listings': {\n            verb: 'GET',\n            targetNoParams: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n                outputMappings: {  \n                    'id': {\n                        selector: '.views-field-title a',\n                        accessor: 'text'\n                    },\n                    'shortdesc': {\n                        selector: 'views-field-field-listing-misc-label .field-content',\n                        accessor: 'text'\n                    },\n                    'bedrooms': {\n                        selector: '.views-field-field-listing-bedrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'bathrooms': {\n                        selector: '.views-field-field-listing-bathrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'price': {\n                        selector: '.views-field-field-listing-sale-price .field-content',\n                        accessor: 'text'\n                    },\n                    'address': {\n                        selector: '.views-field-field-listing-address .field-content',\n                        accessor: 'text'\n                    },\n                    'openhouse': {\n                        selector: '.views-field-field-listing-open-house .field-content',\n                        accessor: 'text'\n                    },\n                    'description': {\n                        selector: '.views-field-body .field-content',\n                        accessor: 'text'\n                    }\n                }\n            },\n            targetWithParams: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n                outputMappings: {  \n                    'id': {\n                        selector: '.views-field-title a',\n                        accessor: 'text'\n                    },\n                    'shortdesc': {\n                        selector: 'views-field-field-listing-misc-label .field-content',\n                        accessor: 'text'\n                    },\n                    'bedrooms': {\n                        selector: '.views-field-field-listing-bedrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'bathrooms': {\n                        selector: '.views-field-field-listing-bathrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'price': {\n                        selector: '.views-field-field-listing-sale-price .field-content',\n                        accessor: 'text'\n                    },\n                    'address': {\n                        selector: '.views-field-field-listing-address .field-content',\n                        accessor: 'text'\n                    },\n                    'openhouse': {\n                        selector: '.views-field-field-listing-open-house .field-content',\n                        accessor: 'text'\n                    },\n                    'description': {\n                        selector: '.views-field-body .field-content',\n                        accessor: 'text'\n                    }\n                },\n                inputMappings: {\n                    'beds': 'field_listing_bedrooms_value'\n                }\n            }\n        }\n    }\n};\n\nfor (var method in Config.methods) {\n    // the parameter version of the method overwrites the url, so we save the original here\n    var originalUrl = Config.methods[method].targetWithParams.url;\n\n    app.get('/' + method, function(req, res) {\n\n        // how the hell do you check if req.query exists?\n        var hasParams = false;\n        for (var keys in req.query) {\n            hasParams = true;\n            break;\n        }\n\n        // if there are no parameters, use the parameterless scrape\n        if (!hasParams) {\n            scraper.scrape(Config.methods[method].targetNoParams, function(err, output) {\n                res.json(output);\n            }, true);    \n        } else {\n            // map method params to target site's query string params [TODO: support more ways of mapping params (post, routes, whatever)]\n            Config.methods[method].targetWithParams.url = originalUrl;\n\n            for (var param in req.query) {\n                Config.methods[method].targetWithParams.url += Config.methods[method].targetWithParams.inputMappings[param] + '=' + req.query[param] + '&';\n            }            \n            \n            scraper.scrape(Config.methods[method].targetWithParams, function(err, output) {\n                res.json(output);\n            }, true);    \n        }\n        \n    });\n}\n// GET /listings \n// returns all listings\n// optional filter parameters: id, shortdesc, bedrooms, bathrooms, price_max, price_min, address, description\n// app.get('/listings', function(req, res){\n\n//     // parse query string into JSON\n//     var params = {};\n//     for (var param in req.query) {\n//         params[param] = req.query[param];\n//     }\n\n//     scraperOptions = {\n//         url: 'http://grapevine.ca/search-results/classic?',\n//         verb: 'GET',\n//         rowSelector: '.views-row',\n//         outputMappings: {  \n//             'id': {\n//                 selector: '.views-field-title a',\n//                 accessor: 'text'\n//             },\n//             'shortdesc': {\n//                 selector: 'views-field-field-listing-misc-label .field-content',\n//                 accessor: 'text'\n//             },\n//             'bedrooms': {\n//                 selector: '.views-field-field-listing-bedrooms .field-content',\n//                 accessor: 'text'\n//             },\n//             'bathrooms': {\n//                 selector: '.views-field-field-listing-bathrooms .field-content',\n//                 accessor: 'text'\n//             },\n//             'price': {\n//                 selector: '.views-field-field-listing-sale-price .field-content',\n//                 accessor: 'text'\n//             },\n//             'address': {\n//                 selector: '.views-field-field-listing-address .field-content',\n//                 accessor: 'text'\n//             },\n//             'openhouse': {\n//                 selector: '.views-field-field-listing-open-house .field-content',\n//                 accessor: 'text'\n//             },\n//             'description': {\n//                 selector: '.views-field-body .field-content',\n//                 accessor: 'text'\n//             }\n//         }\n//     };\n\n//     scraper.listings(scraperOptions, params, function(err, output) {\n//         //console.log(output);\n//         res.json(output);      \n//     }, true);\n\n// });\n\n// scrape google:\n// scraperOptions = {\n//         url: 'http://www.google.ca/search?&q=test',\n//         verb: 'GET',\n//         rowSelector: 'li.g',\n//         outputMappings: {  \n//             'title': {\n//                 selector: 'h3.r a',\n//                 accessor: 'text'\n//             }\n//         }\n//     };\n\napp.listen(3000);\nconsole.log('Express started on port 3000');"]],"start1":0,"start2":0,"length1":0,"length2":7412}]],"length":7412}
{"contributors":[],"silentsave":false,"ts":1375198387714,"patch":[[{"diffs":[[0,"re('util');\n"],[-1,"\n"],[0,"var express "]],"start1":60,"start2":60,"length1":25,"length2":24},{"diffs":[[0,");\n\n"],[-1,"var app = express();\n\nvar Config = {\n    methods: {\n        'listings': {\n            verb: 'GET',\n            targetNoParams: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n                outputMappings: {  \n                    'id': {\n                        selector: '.views-field-title a',\n                        accessor: 'text'\n                    },\n                    'shortdesc': {\n                        selector: 'views-field-field-listing-misc-label .field-content',\n                        accessor: 'text'\n                    },\n                    'bedrooms': {\n                        selector: '.views-field-field-listing-bedrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'bathrooms': {\n                        selector: '.views-field-field-listing-bathrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'price': {\n                        selector: '.views-field-field-listing-sale-price .field-content',\n                        accessor: 'text'\n                    },\n                    'address': {\n                        selector: '.views-field-field-listing-address .field-content',\n                        accessor: 'text'\n                    },\n                    'openhouse': {\n                        selector: '.views-field-field-listing-open-house .field-content',\n                        accessor: 'text'\n                    },\n                    'description': {\n                        selector: '.views-field-body .field-content',\n                        accessor: 'text'\n                    }\n                }\n            },\n            targetWithParams: {\n                url: 'http://grapevine.ca/search-results/classic?',\n                verb: 'GET',\n                rowSelector: '.views-row',\n                outputMappings: {  \n                    'id': {\n                        selector: '.views-field-title a',\n                        accessor: 'text'\n                    },\n                    'shortdesc': {\n                        selector: 'views-field-field-listing-misc-label .field-content',\n                        accessor: 'text'\n                    },\n                    'bedrooms': {\n                        selector: '.views-field-field-listing-bedrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'bathrooms': {\n                        selector: '.views-field-field-listing-bathrooms .field-content',\n                        accessor: 'text'\n                    },\n                    'price': {\n                        selector: '.views-field-field-listing-sale-price .field-content',\n                        accessor: 'text'\n                    },\n                    'address': {\n                        selector: '.views-field-field-listing-address .field-content',\n                        accessor: 'text'\n                    },\n                    'openhouse': {\n                        selector: '.views-field-field-listing-open-house .field-content',\n                        accessor: 'text'\n                    },\n                    'description': {\n                        selector: '.views-field-body .field-content',\n                        accessor: 'text'\n                    }\n                },\n                inputMappings: {\n                    'beds': 'field_listing_bedrooms_value'\n                }\n            }\n        }\n    }\n};\n\nfor (var method in Config.methods) {\n    // the parameter version of the method overwrites the url, so we save the original here\n    var originalUrl = Config.methods[method].targetWithParams.url;\n\n    app.get('/' + method, function(req, res) {\n\n        // how the hell do you check if req.query exists?\n        var hasParams = false;\n        for (var keys in req.query) {\n            hasParams = true;\n            break;\n        }\n\n        // if there are no parameters, use the parameterless scrape\n        if (!hasParams) {\n            scraper.scrape(Config.methods[method].targetNoParams, function(err, output) {\n                res.json(output);\n            }, true);    \n        } else {\n            // map method params to target site's query string params [TODO: support more ways of mapping params (post, routes, whatever)]\n            Config.methods[method].targetWithParams.url = originalUrl;\n\n            for (var param in req.query) {\n                Config.methods[method].targetWithParams.url += Config.methods[method].targetWithParams.inputMappings[param] + '=' + req.query[param] + '&';\n            }            \n            \n            scraper.scrape(Config.methods[method].targetWithParams, function(err, output) {\n                res.json(output);\n            }, true);    \n        }\n        \n    });\n}\n// GET /listings \n// returns all listings\n// optional filter parameters: id, shortdesc, bedrooms, bathrooms, price_max, price_min, address, description\n// app.get('/listings', function(req, res){\n\n//     // parse query string into JSON\n//     var params = {};\n//     for (var param in req.query) {\n//         params[param] = req.query[param];\n//     }\n\n//     scraperOptions = {\n//         url: 'http://grapevine.ca/search-results/classic?',\n//         verb: 'GET',\n//         rowSelector: '.views-row',\n//         outputMappings: {  \n//             'id': {\n//                 selector: '.views-field-title a',\n//                 accessor: 'text'\n//             },\n//             'shortdesc': {\n//                 selector: 'views-field-field-listing-misc-label .field-content',\n//                 accessor: 'text'\n//             },\n//             'bedrooms': {\n//                 selector: '.views-field-field-listing-bedrooms .field-content',\n//                 accessor: 'text'\n//             },\n//             'bathrooms': {\n//                 selector: '.views-field-field-listing-bathrooms .field-content',\n//                 accessor: 'text'\n//             },\n//             'price': {\n//                 selector: '.views-field-field-listing-sale-price .field-content',\n//                 accessor: 'text'\n//             },\n//             'address': {\n//                 selector: '.views-field-field-listing-address .field-content',\n//                 accessor: 'text'\n//             },\n//             'openhouse': {\n//                 selector: '.views-field-field-listing-open-house .field-content',\n//                 accessor: 'text'\n//             },\n//             'description': {\n//                 selector: '.views-field-body .field-content',\n//                 accessor: 'text'\n//             }\n//         }\n//     };\n\n//     scraper.listings(scraperOptions, params, function(err, output) {\n//         //console.log(output);\n//         res.json(output);      \n//     }, true);\n\n// });\n\n// scrape google:\n// scraperOptions = {\n//         url: 'http://www.google.ca/search?&q=test',\n//         verb: 'GET',\n//         rowSelector: 'li.g',\n//         outputMappings: {  \n//             'title': {\n//                 selector: 'h3.r a',\n//                 accessor: 'text'\n//             }\n//         }\n//     };\n\napp.listen(3000);\nconsole.log('Express started on port 3000');"],[1,"exports.ScrAPI = function(Config) {\n    var app = express();\n    \n    for (var method in Config.methods) {\n        // the parameter version of the method overwrites the url, so we save the original here\n        var originalUrl = Config.methods[method].targetWithParams.url;\n    \n        app.get('/' + method, function(req, res) {\n    \n            // how the hell do you check if req.query exists?\n            var hasParams = false;\n            for (var keys in req.query) {\n                hasParams = true;\n                break;\n            }\n    \n            // if there are no parameters, use the parameterless scrape\n            if (!hasParams) {\n                scraper.scrape(Config.methods[method].targetNoParams, function(err, output) {\n                    res.json(output);\n                }, true);    \n            } else {\n                // map method params to target site's query string params [TODO: support more ways of mapping params (post, routes, whatever)]\n                Config.methods[method].targetWithParams.url = originalUrl;\n    \n                for (var param in req.query) {\n                    Config.methods[method].targetWithParams.url += Config.methods[method].targetWithParams.inputMappings[param] + '=' + req.query[param] + '&';\n                }            \n                \n                scraper.scrape(Config.methods[method].targetWithParams, function(err, output) {\n                    res.json(output);\n                }, true);    \n            }\n            \n        });\n    }\n    \n    \n    app.listen(3000);\n    console.log('Express started on port 3000');\n};\n\n"]],"start1":103,"start2":103,"length1":7308,"length2":1610}]],"length":1713,"saved":false}
